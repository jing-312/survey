<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.atguigu.survey.component.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 引入外部的属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置数据源 -->
	<bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="driverClass" value="${jdbc.driver}"/>
	</bean>
	
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定MyBatis自身配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 装配数据源 -->
		<property name="dataSource" ref="comboPooledDataSource"/>
		<!-- 指定实体类所在的包 -->
		<property name="typeAliasesPackage" value="com.atguigu.survey.entities"/>
	</bean>
	
	<!-- 配置Mapper扫描器 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注意：接口和XML文件所在的包名要一致，文件名也要一致 -->
		<property name="basePackage" value="com.atguigu.survey.component.mappers"/>
	</bean>
	
	<!-- 事务管理器 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="comboPooledDataSource"/>
	</bean>
	
	<!-- 配置声明式事务 -->
	<aop:config>
		<!-- 配置事务切面的切入点表达式 -->
		<aop:pointcut expression="execution(* *..*Service.*(..))" id="txPoinctCut"/>
		
		<!-- 将事务切面的切入点表达式应用于事务通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoinctCut"/>
		
	</aop:config>
	
	<!-- 配置事务通知 -->
	<tx:advice transaction-manager="dataSourceTransactionManager" id="txAdvice">
		<tx:attributes>
			<!-- 配置具体事务方法的事务属性 -->
			<!-- ★注意：service方法如果没有在这里配置事务属性，那么就没有事务 -->
			<!-- 查询方法 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="check*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="login" read-only="true"/>
			
			<!-- 增删改方法 -->
		<tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="regist" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="dispatcher*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!--配置日志相关的功能  -->
	<bean  id="logRecorder" class="com.atguigu.survey.log.aspects.LogRecorder" />
	
	<aop:config>
		<aop:pointcut expression="(execution(* *..*Service.save*(..)) or 
									execution(* *..*Service.delete*(..)) or  
									execution(* *..*Service.update*(..)) or  
									execution(* *..*Service.batch*(..)) or  
									execution(* *..*Service.regist(..)) or  
									execution(* *..*Service.dispatcher*(..))) and !bean(logServiceImpl)" id="logPointCut"/>
									
		<aop:aspect id="logAspect" ref="logRecorder">
			<aop:around method="logRecord" pointcut-ref="logPointCut"/>
		</aop:aspect>
	</aop:config>
	
	
</beans>
